// <auto-generated />
using System;
using Mebeller.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Mebeller.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230613210318_Coupons")]
    partial class Coupons
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesCategoryId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("DiscountOrder", b =>
                {
                    b.Property<int>("DiscountsDiscountId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersOrderId")
                        .HasColumnType("int");

                    b.HasKey("DiscountsDiscountId", "OrdersOrderId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("DiscountOrder");
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReplied")
                        .HasColumnType("bit");

                    b.Property<string>("MessageDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("MessageReplyId")
                        .HasColumnType("int");

                    b.Property<string>("MessageSenderEmail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MessageSenderName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MessageSubject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("MessageReplyId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.MessageReply", b =>
                {
                    b.Property<int>("MessageReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageReplyId"), 1L, 1);

                    b.Property<string>("MessageReplyDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("MessageReplySubmitTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageReplyId");

                    b.ToTable("MessageReply");
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.Newsletter", b =>
                {
                    b.Property<int>("NewsletterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsletterId"), 1L, 1);

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("NewsletterId");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.UserDetails", b =>
                {
                    b.Property<int>("UserDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDetailsId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserCity")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserProvince")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserDetailsId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"), 1L, 1);

                    b.Property<int>("CountOfVisit")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastVisitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorIpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VisitorId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("Mebeller.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UserDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Mebeller.Models.Blog.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("Mebeller.Models.Blog.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlogHits")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeaturedImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PublishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("608cbe5a-dbeb-4b09-89d3-b74617f4b605"),
                            Author = "John Doe",
                            BlogHits = 0,
                            Content = "This is the content of the first blog post.",
                            FeaturedImageUrl = "https://images.sofology.co.uk/q_70,dpr_1.0,w_1600,c_scale,fl_lossy,f_auto/productmedia/lifestyle/sku000973164.jpg",
                            Heading = "First Blog Post",
                            PageTitle = "First Blog Post",
                            PublishedDate = new DateTimeOffset(new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Unspecified).AddTicks(6049), new TimeSpan(0, 0, 0, 0, 0)),
                            ShortDescription = "Short description of the first blog post.",
                            UrlHandle = "first-blog-post",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("dabcb683-6e4f-483b-b53d-a7ffc8ba0d3d"),
                            Author = "Jane Smith",
                            BlogHits = 0,
                            Content = "This is the content of the second blog post.",
                            FeaturedImageUrl = "https://images.sofology.co.uk/q_70,dpr_1.0,w_1600,c_scale,fl_lossy,f_auto/productmedia/lifestyle/sku000973164.jpg",
                            Heading = "Second Blog Post",
                            PageTitle = "Second Blog Post",
                            PublishedDate = new DateTimeOffset(new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Unspecified).AddTicks(6059), new TimeSpan(0, 0, 0, 0, 0)),
                            ShortDescription = "Short description of the second blog post.",
                            UrlHandle = "second-blog-post",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("e9fbf564-4cc3-4140-83e0-856a17a6fc2b"),
                            Author = "David Johnson",
                            BlogHits = 0,
                            Content = "This is the content of the third blog post.",
                            FeaturedImageUrl = "https://images.sofology.co.uk/q_70,dpr_1.0,w_1600,c_scale,fl_lossy,f_auto/productmedia/lifestyle/sku000973164.jpg",
                            Heading = "Third Blog Post",
                            PageTitle = "Third Blog Post",
                            PublishedDate = new DateTimeOffset(new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Unspecified).AddTicks(6061), new TimeSpan(0, 0, 0, 0, 0)),
                            ShortDescription = "Short description of the third blog post.",
                            UrlHandle = "third-blog-post",
                            Visible = true
                        });
                });

            modelBuilder.Entity("Mebeller.Models.Blog.BlogPostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BlogPostComment");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdminReplied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("ParentCommentCommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Mebeller.Models.Media.CommentReply", b =>
                {
                    b.Property<int>("CommentReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentReplyId"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentReplyId");

                    b.ToTable("CommentReplies");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PageId"), 1L, 1);

                    b.Property<string>("PageDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PagePathAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("PageId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ParentCategoryCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Ofis mebeli"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Mətbəx mebelləri"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Yataq otağı mebelləri"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Ev mebelləri"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Dolablar"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Divanlar"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Stol stul"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Jalüz və pərdə"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Bağ evi üçün mebellər"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Digərləri"
                        });
                });

            modelBuilder.Entity("Mebeller.Models.Product.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"), 1L, 1);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOrderCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrderSeen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderPaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Mebeller.Models.Product.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailsId"), 1L, 1);

                    b.Property<bool>("IsOrderDetailsProductSimple")
                        .HasColumnType("bit");

                    b.Property<int>("OrderDetailsQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderDetailsTotalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersDetails");
                });

            modelBuilder.Entity("Mebeller.Models.Product.OrderInvoiceDetails", b =>
                {
                    b.Property<int>("OrderInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderInvoiceId"), 1L, 1);

                    b.Property<string>("InvoiceDetailsProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceDetailsQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("InvoiceDetailsTotalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("OrderInvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderInvoiceDetails");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductHits")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("ProductSalesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductDescription = "Comfortable chair for office use",
                            ProductHits = 0,
                            ProductName = "Office Chair",
                            ProductPrice = 100,
                            ProductQuantityInStock = 50,
                            ProductSalesCount = 0,
                            RegistrationTime = new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Utc).AddTicks(5764),
                            UserEmail = "mebeller@turn.az",
                            UserName = "Mebeller",
                            UserPhoneNumber = "12345678910"
                        },
                        new
                        {
                            ProductId = 2,
                            ProductDescription = "Spacious desk for office use",
                            ProductHits = 0,
                            ProductName = "Office Desk",
                            ProductPrice = 200,
                            ProductQuantityInStock = 30,
                            ProductSalesCount = 0,
                            RegistrationTime = new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Utc).AddTicks(5772),
                            UserEmail = "mebeller@turn.az",
                            UserName = "Mebeller",
                            UserPhoneNumber = "12345678910"
                        },
                        new
                        {
                            ProductId = 3,
                            ProductDescription = "Spacious desk for office use",
                            ProductHits = 0,
                            ProductName = "Office Desk 2",
                            ProductPrice = 100,
                            ProductQuantityInStock = 30,
                            ProductSalesCount = 0,
                            RegistrationTime = new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Utc).AddTicks(5773),
                            UserEmail = "mebeller@turn.az",
                            UserName = "Mebeller",
                            UserPhoneNumber = "12345678910"
                        },
                        new
                        {
                            ProductId = 4,
                            ProductDescription = "Spacious desk for office use",
                            ProductHits = 0,
                            ProductName = "Office Desk 3",
                            ProductPrice = 200,
                            ProductQuantityInStock = 30,
                            ProductSalesCount = 0,
                            RegistrationTime = new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Utc).AddTicks(5774),
                            UserEmail = "mebeller@turn.az",
                            UserName = "Mebeller",
                            UserPhoneNumber = "12345678910"
                        },
                        new
                        {
                            ProductId = 5,
                            ProductDescription = "Spacious desk for office use",
                            ProductHits = 0,
                            ProductName = "Office Desk 4",
                            ProductPrice = 200,
                            ProductQuantityInStock = 30,
                            ProductSalesCount = 0,
                            RegistrationTime = new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Utc).AddTicks(5776),
                            UserEmail = "mebeller@turn.az",
                            UserName = "Mebeller",
                            UserPhoneNumber = "12345678910"
                        },
                        new
                        {
                            ProductId = 6,
                            ProductDescription = "Spacious desk for office use",
                            ProductHits = 0,
                            ProductName = "Office Desk 5",
                            ProductPrice = 200,
                            ProductQuantityInStock = 30,
                            ProductSalesCount = 0,
                            RegistrationTime = new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Utc).AddTicks(5777),
                            UserEmail = "mebeller@turn.az",
                            UserName = "Mebeller",
                            UserPhoneNumber = "12345678910"
                        },
                        new
                        {
                            ProductId = 7,
                            ProductDescription = "Spacious desk for office use",
                            ProductHits = 0,
                            ProductName = "Office Desk 6",
                            ProductPrice = 150,
                            ProductQuantityInStock = 30,
                            ProductSalesCount = 0,
                            RegistrationTime = new DateTime(2023, 6, 13, 21, 3, 17, 991, DateTimeKind.Utc).AddTicks(5779),
                            UserEmail = "mebeller@turn.az",
                            UserName = "Mebeller",
                            UserPhoneNumber = "12345678910"
                        });
                });

            modelBuilder.Entity("Mebeller.Models.Product.ProductInformation", b =>
                {
                    b.Property<int>("ProductInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductInformationId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("ProductInformationId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInformation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mebeller.Models.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscountOrder", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsDiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mebeller.Models.Product.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.Banner", b =>
                {
                    b.HasOne("Mebeller.Models.Media.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Mebeller.Areas.Admin.Model.Media.Message", b =>
                {
                    b.HasOne("Mebeller.Areas.Admin.Model.Media.MessageReply", "MessageReply")
                        .WithMany()
                        .HasForeignKey("MessageReplyId");

                    b.Navigation("MessageReply");
                });

            modelBuilder.Entity("Mebeller.Data.ApplicationUser", b =>
                {
                    b.HasOne("Mebeller.Models.Media.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Mebeller.Areas.Admin.Model.Media.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserDetailsId");

                    b.Navigation("Image");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Mebeller.Models.Blog.BlogCategory", b =>
                {
                    b.HasOne("Mebeller.Models.Blog.BlogPost", null)
                        .WithMany("Categories")
                        .HasForeignKey("BlogPostId");
                });

            modelBuilder.Entity("Mebeller.Models.Blog.BlogPost", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Category", null)
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Comment", b =>
                {
                    b.HasOne("Mebeller.Models.Media.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentCommentId");

                    b.HasOne("Mebeller.Models.Product.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mebeller.Data.ApplicationUser", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Image", b =>
                {
                    b.HasOne("Mebeller.Models.Blog.BlogPost", null)
                        .WithMany("Images")
                        .HasForeignKey("BlogPostId");

                    b.HasOne("Mebeller.Models.Product.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Tag", b =>
                {
                    b.HasOne("Mebeller.Models.Blog.BlogPost", null)
                        .WithMany("Tags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mebeller.Models.Product.Category", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Category", "ParentCategory")
                        .WithMany("Categories")
                        .HasForeignKey("ParentCategoryCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Discount", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Product", null)
                        .WithMany("ProductDiscount")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Order", b =>
                {
                    b.HasOne("Mebeller.Data.ApplicationUser", "OwnerUser")
                        .WithMany("UserOrders")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Mebeller.Models.Product.OrderDetails", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Order", "Order")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("Mebeller.Models.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Mebeller.Models.Product.OrderInvoiceDetails", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Order", "Order")
                        .WithMany("InvoicesDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Product", b =>
                {
                    b.HasOne("Mebeller.Data.ApplicationUser", null)
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Mebeller.Models.Product.ProductInformation", b =>
                {
                    b.HasOne("Mebeller.Models.Product.Product", "Product")
                        .WithMany("Informations")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mebeller.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mebeller.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mebeller.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mebeller.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mebeller.Data.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("UserComments");

                    b.Navigation("UserOrders");
                });

            modelBuilder.Entity("Mebeller.Models.Blog.BlogPost", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Mebeller.Models.Media.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Category", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Order", b =>
                {
                    b.Navigation("InvoicesDetails");

                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("Mebeller.Models.Product.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Informations");

                    b.Navigation("ProductDiscount");
                });
#pragma warning restore 612, 618
        }
    }
}
